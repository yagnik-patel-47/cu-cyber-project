"use client";

import { useState } from "react";
import { searchVulnerabilities, type Vulnerability } from "@/lib/nvd";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
	Card,
	CardContent,
	CardDescription,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { formatDistanceToNow } from "date-fns";
import { Search } from "lucide-react";

function getSeverityColor(severity?: string) {
	switch (severity?.toLowerCase()) {
		case "critical":
			return "bg-red-600 hover:bg-red-700";
		case "high":
			return "bg-orange-500 hover:bg-orange-600";
		case "medium":
			return "bg-yellow-500 hover:bg-yellow-600";
		case "low":
			return "bg-blue-500 hover:bg-blue-600";
		default:
			return "bg-gray-500 hover:bg-gray-600";
	}
}

function VulnerabilityCard({
	vulnerability,
}: { vulnerability: Vulnerability }) {
	const description =
		vulnerability.descriptions.find((d) => d.lang === "en")?.value ||
		"No description available";

	// Get CVSS data if available (v3.1 preferred, fallback to v3.0)
	const cvssData =
		vulnerability.metrics?.cvssMetricV31?.[0]?.cvssData ||
		vulnerability.metrics?.cvssMetricV30?.[0]?.cvssData;

	const severity = cvssData?.baseSeverity || "Unknown";
	const score = cvssData?.baseScore || null;

	return (
		<Card>
			<CardHeader className="pb-2">
				<div className="flex justify-between items-start">
					<CardTitle className="text-lg">{vulnerability.id}</CardTitle>
					<Badge className={getSeverityColor(severity)}>
						{severity} {score !== null && `(${score})`}
					</Badge>
				</div>
				<CardDescription>
					Published{" "}
					{formatDistanceToNow(new Date(vulnerability.published), {
						addSuffix: true,
					})}
				</CardDescription>
			</CardHeader>
			<CardContent>
				<p className="text-sm line-clamp-3">{description}</p>
				<a
					href={`https://nvd.nist.gov/vuln/detail/${vulnerability.id}`}
					target="_blank"
					rel="noopener noreferrer"
					className="text-blue-600 hover:underline text-sm mt-2 inline-block"
				>
					View details
				</a>
			</CardContent>
		</Card>
	);
}

export function VulnerabilitySearch() {
	const [query, setQuery] = useState("");
	const [searchResults, setSearchResults] = useState<Vulnerability[]>([]);
	const [isSearching, setIsSearching] = useState(false);
	const [hasSearched, setHasSearched] = useState(false);

	async function handleSearch(e: React.FormEvent) {
		e.preventDefault();

		if (!query.trim()) return;

		setIsSearching(true);
		setHasSearched(true);

		try {
			const results = await searchVulnerabilities(query);
			setSearchResults(results);
		} catch (error) {
			console.error("Search error:", error);
		} finally {
			setIsSearching(false);
		}
	}

	return (
		<div>
			<form onSubmit={handleSearch} className="flex gap-2 mb-6">
				<Input
					type="text"
					placeholder="Search for vulnerabilities (e.g., 'Log4j', 'Windows', 'Apache')"
					value={query}
					onChange={(e) => setQuery(e.target.value)}
					className="flex-1"
				/>
				<Button type="submit" disabled={isSearching}>
					{isSearching ? "Searching..." : <Search className="mr-2 h-4 w-4" />}
					Search
				</Button>
			</form>

			{hasSearched && (
				<div className="mt-4">
					<h3 className="text-xl font-bold mb-4">Search Results</h3>

					{isSearching ? (
						<p>Searching...</p>
					) : searchResults.length > 0 ? (
						<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
							{searchResults.map((vulnerability) => (
								<VulnerabilityCard
									key={vulnerability.id}
									vulnerability={vulnerability}
								/>
							))}
						</div>
					) : (
						<p>No vulnerabilities found matching your search.</p>
					)}
				</div>
			)}
		</div>
	);
}
